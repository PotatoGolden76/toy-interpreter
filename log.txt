ID: 4
>>> Current State: 
Execution Stack: 
> Ref(int) v1 | Ref(int) v2 | int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> Ref(int) v2 | int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> Ref(int) v1
Output: []
Symbols:

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> Ref(int) v2 | int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> Ref(int) v1
Output: []
Symbols:

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> Ref(int) v2 | int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> Ref(int) v2 | int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> Ref(int) v2
Output: []
Symbols:
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> Ref(int) v2
Output: []
Symbols:
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int x | int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> int x
Output: []
Symbols:
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> int x
Output: []
Symbols:
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> int q | new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> int q
Output: []
Symbols:
[x, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> int q
Output: []
Symbols:
[x, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v1, 20) | new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> new(v1, 20)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> new(v1, 20)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (0, int)]

Files:

Heap: 

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (1, int)]

Files:

Heap: 
1->20

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> new(v2, 30) | newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (1, int)]

Files:

Heap: 
1->20

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> new(v2, 30)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (1, int)]

Files:

Heap: 
1->20

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> new(v2, 30)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (0, int)]
[v1, (1, int)]

Files:

Heap: 
1->20

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(x) | fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> newLock(x)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> newLock(x)
Output: []
Symbols:
[x, 0]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)) | newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x))
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> fork(fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x))
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> newLock(q) | fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> fork(lock(x) | writeHeap(v1, ) | unlock(x)) | lock(x) | writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> newLock(q)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> lock(x) | writeHeap(v1, ) | unlock(x)
> fork(lock(x) | writeHeap(v1, ) | unlock(x))
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> newLock(q)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> lock(x) | writeHeap(v1, ) | unlock(x)
> fork(lock(x) | writeHeap(v1, ) | unlock(x))
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> lock(x) | writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> lock(x) | writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q) | [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> lock(x) | writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> lock(x) | writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> fork(lock(q) | writeHeap(v2, ) | unlock(q)) | lock(q) | writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> lock(q) | writeHeap(v2, ) | unlock(q)
> fork(lock(q) | writeHeap(v2, ) | unlock(q))
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> lock(q) | writeHeap(v2, ) | unlock(q)
> fork(lock(q) | writeHeap(v2, ) | unlock(q))
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> lock(q) | writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> unlock(x)
> writeHeap(v1, )
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> lock(q) | writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> lock(q) | writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> unlock(x)
> writeHeap(v1, )
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> lock(q) | writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->20
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
> unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, -1]
[1, 5]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 5
>>> Current State: 
Execution Stack: 
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> writeHeap(v1, ) | unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> unlock(q)
> writeHeap(v2, )
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> unlock(x)
> writeHeap(v1, )
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> unlock(q)
> writeHeap(v2, )
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> unlock(x)
> writeHeap(v1, )
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->200
2->30

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
> unlock(x)
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
> lock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 4]
[1, 6]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 6
>>> Current State: 
Execution Stack: 
Output: []
Symbols:
[x, 1]
[q, 0]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> writeHeap(v2, ) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> unlock(q)
> writeHeap(v2, )
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> unlock(q)
> writeHeap(v2, )
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->300

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
> unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 7]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 7
>>> Current State: 
Execution Stack: 
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> [NoOp] | lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> [NoOp]
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(x) | print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> lock(x)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v1) | unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> print: readHeap(v1)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
> print: readHeap(v1)
Output: []
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(x) | lock(q) | print: readHeap(v2) | unlock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(q) | print: readHeap(v2) | unlock(q)
> unlock(x)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(q) | print: readHeap(v2) | unlock(q)
> unlock(x)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, 4]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(q) | print: readHeap(v2) | unlock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> lock(q) | print: readHeap(v2) | unlock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v2) | unlock(q)
> lock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v2) | unlock(q)
> lock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v2) | unlock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 4]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> print: readHeap(v2) | unlock(q)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 4]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(q)
> print: readHeap(v2)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 4]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(q)
> print: readHeap(v2)
Output: [199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 4]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(q)
Output: [305, 199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 4]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
> unlock(q)
Output: [305, 199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, 4]
[1, -1]


<--- STEP --->

ID: 4
>>> Current State: 
Execution Stack: 
Output: [305, 199]
Symbols:
[x, 1]
[q, 2]
[v2, (2, int)]
[v1, (1, int)]

Files:

Heap: 
1->199
2->305

Symbols:
[2, -1]
[1, -1]


<--- STEP --->

